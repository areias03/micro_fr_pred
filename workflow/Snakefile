configfile: "config/config.yaml"


rule all:
    input:
        f"results/{config['item']}/manifest.csv"

rule pre_processing:
    output:
        mag_list=f"results/{config['item']}/mags.txt",
        eggnog_data=f"results/{config['item']}/eggnog_data.csv"
    params:
        item=config["item"],
        processing_level=config["processing_level"]
    threads:
        1
    run:
        import os
        os.makedirs(os.path.join("results",params.item), exist_ok = True)
        if params.processing_level == "sample":
            from spirepy import Sample
            import itertools
            import polars as pl
            sample = Sample(params.item)
            sample.get_eggnog_data().with_columns(pl.lit(sample.id).alias("sample")).write_csv(output.eggnog_data)
            mags = sample.get_mags()["genome_id"].to_list()
            with open(str(output.mag_list), "w") as f:
                f.write('\n'.join(','.join(map(str, row)) for row in list(map(list, zip(mags, itertools.cycle([sample.id]))))))
        if params.processing_level == "study":
            from spirepy import Study
            import polars as pl
            egg_data = []
            study = Study(params.item)
            for s in study.get_samples():
                egg_data.append(s.get_eggnog_data().with_columns(pl.lit(s.id).alias("sample")))
            pl.concat(egg_data).write_csv(output.eggnog_data)
            with open(str(output.mag_list), "w") as f:
                f.write("\n".join(",".join(map(str, row)) for row in study.get_mags().with_columns(mapping = pl.concat_list("genome_id","derived_from_sample"))["mapping"].to_list()))

rule download_mags:
    input:
        f"results/{config['item']}/mags.txt"
    output:
        mags=directory(f"results/{config['item']}/mags/")
    params:
        item = config["item"],
        processing_level = config["processing_level"]
    threads:
        24
    shell:
        """
        python scripts/mag_download.py {input} -o {output}
        """

rule split_eggnog_data:
    input:
        mags = f"results/{config['item']}/mags/",
        eggnog_data=f"results/{config['item']}/eggnog_data.csv"
    output:
        directory(f"results/{config['item']}/eggnog/")
    threads:
        24
    shell:
        """
        python scripts/split_eggnog_data.py {input.mags} -e {input.eggnog_data} -o {output}
        """

rule reconstruct:
    input:
        eggnog_data=f"results/{config['item']}/eggnog/"
    output:
        reconstructions_folder = directory(f"results/{config['item']}/reconstructions/"),
        reconstructions_done = touch(f"results/{config['item']}/reconstructions/reconstructions.done")
    threads:
        24
    shell:
        """
        python scripts/reconstruct.py {input.eggnog_data} -o {output.reconstructions_folder}
         """

rule generate_manifest:
    input:
        mag_folder = f"results/{config['item']}/mags",
        reconstructions_folder = f"results/{config['item']}/reconstructions/"
    output:
        f"results/{config['item']}/manifest.csv"
    params:
        item=config["item"],
        processing_level=config["processing_level"]
    threads:
        24
    shell:
        """
        python scripts/manifest_generation.py {params.item} -t {params.processing_level} -o {output} -m {input.mag_folder} -r {input.reconstructions_folder}
        """        

# rule simulation:
#     input:
#         script="../scripts/simulation/item_simulation.py",
#         manifest_done=f"results/{config['item']}/manifest.done"
#     output:
#         touch(f"results/{config['item']}/simulation.done")
#     shell:
#         "python {input.script} --item {config['item']}"
# rule functional_role_prediction:
#     input:
#         growth_results=""
#         manifest=""
#     output:
